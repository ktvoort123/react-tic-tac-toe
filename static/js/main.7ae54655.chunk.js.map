{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","updatedSquare","id","value","onClickCallback","Board","squareList","squares","squaresOnBoard","row","length","col","push","key","generateSquareComponents","generateSquares","currentId","App","useState","setSquares","currentPlayer","setPlayer","winner","setWinner","checkForWinner","squaresArray","i","numFilledSquares","forEach","squaresRow","countPerRow","filter","square","clickedOnSquare","squaresNew","squareArray","tempArray","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ae54655.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n\n  const onButtonClick = () => {\n    const updatedSquare = {\n        id: props.id,\n        value: \"\",\n      }\n    props.onClickCallback(updatedSquare);\n  };\n\n  return <button\n    className=\"square\" onClick={onButtonClick}\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n\n  let squaresOnBoard = []\n  for(let row = 0; row<squares.length; row++){\n    for(let col = 0; col<squares[row].length; col++){\n      squaresOnBoard.push(\n      <Square \n        onClickCallback={onClickCallback} \n        id={squares[row][col].id} \n        value={squares[row][col].value}\n        key={squares[row][col].id}\n      />\n      )\n    }\n  };\n\n  return squaresOnBoard\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: \"\",\n      });\n      currentId += 1;\n    }\n  }\n  return squares; // array of arrays\n}\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setPlayer] = useState(PLAYER_1);\n  const [winner, setWinner] = useState(null);\n\n  \n  const onClickCallback = (clickedOnSquare) => {\n    const squaresNew =[]\n    squares.forEach( (squareArray) => {\n      const tempArray = []\n      squareArray.forEach( (square) => {\n        if(square.id === clickedOnSquare.id && square.value === \"\" && winner === null) {\n          clickedOnSquare.value = currentPlayer\n          tempArray.push(clickedOnSquare)\n          currentPlayer === PLAYER_1 ? setPlayer(PLAYER_2) : setPlayer(PLAYER_1)\n    \n        }\n        else{\n          tempArray.push(square)\n        };\n\n      })\n      squaresNew.push(tempArray)\n    })\n    setSquares(squaresNew)\n    checkForWinner(squaresNew)\n  };\n    \n\n  const checkForWinner = (squaresArray) => {\n\n    // checking diagonals\n    if ( squaresArray[0][0].value === squaresArray[1][1].value && squaresArray[0][0].value === squaresArray[2][2].value && squaresArray[0][0].value !==\"\") {\n      setWinner(squaresArray[0][0].value)\n    } \n    else if ( squaresArray[2][0].value === squaresArray[1][1].value && squaresArray[2][0].value === squaresArray[0][2].value && squaresArray[2][0].value !==\"\") {\n      setWinner(squaresArray[2][0].value)\n    } \n\n    // checking verticals & horizontals\n    for(let i = 0; i < 3; i++) {\n       if ( squaresArray[0][i].value === squaresArray[1][i].value && squaresArray[0][i].value === squaresArray[2][i].value && squaresArray[0][i].value !==\"\" ) {\n        setWinner(squaresArray[0][i].value)\n       } \n       else if ( squaresArray[i][0].value === squaresArray[i][1].value && squaresArray[i][0].value === squaresArray[i][2].value && squaresArray[i][0].value !==\"\" ) {\n        setWinner(squaresArray[i][0].value)\n       } \n    }\n\n    // checking for tie\n    let numFilledSquares = 0\n\n    squaresArray.forEach( (squaresRow) => {\n      let countPerRow = squaresRow.filter( square => {\n        return square.value !==\"\"\n      })\n      numFilledSquares += countPerRow.length\n    })\n    \n    if(numFilledSquares === 9) {\n      setWinner(\"Tie\")\n    };\n  }\n\n  const resetGame = () => {\n    setSquares(generateSquares())\n    setWinner(null)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>The winner is <em>{winner}</em></h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={onClickCallback} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}